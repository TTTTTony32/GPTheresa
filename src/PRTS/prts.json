[{"id":"prts","user_id":"2c02ca71-d566-4e81-bd68-baf0f4d72d71","name":"PRTS","content":"\"\"\"\ntitle: PRTS\nauthor: Tony32\nauthor_url: \ngit_url: \ndescription: This tools allow model access prts.wiki, which is a wiki for Arknights.\nrequired_open_webui_version: 0.1.5\nrequirements: requests\nversion: 0.1.5\nlicence: MIT\n\"\"\"\n\nimport requests\nfrom typing import Callable, Any\n\n\nclass EventEmitter:\n    def __init__(self, event_emitter: Callable[[dict], Any] = None):\n        self.event_emitter = event_emitter\n\n    async def emit(self, description=\"Unknown State\", status=\"in_progress\", done=False):\n        if self.event_emitter:\n            await self.event_emitter(\n                {\n                    \"type\": \"status\",\n                    \"data\": {\n                        \"status\": status,\n                        \"description\": description,\n                        \"done\": done,\n                    },\n                }\n            )\n\n\nclass HelperFunction:\n    def __init__(self):\n        pass\n\n    def get_profile_enter(\n        self, name: str, __event_emitter__: Callable[[dict], Any] = None\n    ) -> str:\n        url = f\"https://prts.wiki/api.php?action=parse&page={name}&prop=wikitext&format=json\"\n        try:\n            response = requests.get(url)\n        except:\n            return None\n        data = response.json()\n        if \"error\" in data:\n            return None\n        wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        if \"#redirect\" in wikitext_content:\n            start = wikitext_content.find(\"[[\") + 2\n            end = wikitext_content.find(\"]]\")\n            redirect_target = wikitext_content[start:end]\n            url = f\"https://prts.wiki/api.php?action=parse&page={redirect_target}&prop=wikitext&format=json\"\n            try:\n                response = requests.get(url)\n            except:\n                return None\n            data = response.json()\n            wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        section_title = \"干员档案\"\n        start = f\"=={section_title}==\\n\"\n        start_index = wikitext_content.find(start)\n        if start_index == -1:\n            start = f\"== {section_title} ==\\n\"\n            start_index = wikitext_content.find(start)\n            if start_index == -1:\n                return None\n        end = \"==\"\n        end_index = wikitext_content.find(end, start_index + len(start) + 1)\n        if end_index == -1:\n            end_index = len(wikitext_content)\n        section_content = wikitext_content[start_index:end_index]\n        section_content = (\n            section_content.replace(\"{\", \"\")\n            .replace(\"}\", \"\")\n            .replace(\"|\", \"\")\n            .replace(\"[[\", \"\")\n            .replace(\"]]\", \"\")\n        )\n        return f\"该干员档案内容：\\n{section_content}\"\n\n    def get_profile_noenter(self, name: str) -> str:\n        url = f\"https://prts.wiki/api.php?action=parse&page=剧情角色一览&prop=wikitext&format=json\"\n        try:\n            response = requests.get(url)\n        except:\n            return None\n        data = response.json()\n        if \"error\" in data:\n            return None\n        wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        start = f\"[[{name}]]\\n\"\n        start_index = wikitext_content.find(start)\n        if start_index == -1:\n            start = f\"|{name}\\n\"\n            start_index = wikitext_content.find(start)\n            if start_index == -1:\n                return None\n        end = \"\\n\"\n        end_index = wikitext_content.find(end, start_index + len(start) + 1)\n        if end_index == -1:\n            end_index = len(wikitext_content)\n        section_content = wikitext_content[start_index:end_index]\n        section_content = (\n            section_content.replace(\"{\", \"\")\n            .replace(\"}\", \"\")\n            .replace(\"|\", \"\")\n            .replace(\"[[\", \"\")\n            .replace(\"]]\", \"\")\n        )\n        return f\"该角色概要内容：\\n{section_content}\"\n\n    def get_organization_info(self, name: str) -> str:\n        url = f\"https://prts.wiki/api.php?action=parse&page=泰拉大典:组织/{name}&prop=wikitext&format=json\"\n        try:\n            response = requests.get(url)\n        except:\n            return None\n        data = response.json()\n        if \"error\" in data:\n            return self.get_organization_info_2(name)\n        wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        if \"#redirect\" in wikitext_content:\n            start = wikitext_content.find(\"[[\") + 2\n            end = wikitext_content.find(\"]]\")\n            redirect_target = wikitext_content[start:end]\n            url = f\"https://prts.wiki/api.php?action=parse&page={redirect_target}&prop=wikitext&format=json\"\n            try:\n                response = requests.get(url)\n            except:\n                return None\n            data = response.json()\n            wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        start = f\"{name}\"\n        start_index = wikitext_content.find(start)\n        if start_index == -1:\n            return None\n        end = \"注释与链接\"\n        end_index = wikitext_content.find(end, start_index + len(start) + 1)\n        if end_index == -1:\n            end_index = len(wikitext_content)\n        section_content = wikitext_content[start_index:end_index]\n        section_content = (\n            section_content.replace(\"{\", \"\")\n            .replace(\"}\", \"\")\n            .replace(\"|\", \"\")\n            .replace(\"[[\", \"\")\n            .replace(\"]]\", \"\")\n        )\n        return f\"该组织详细内容：\\n{section_content}\"\n\n    def get_organization_info_2(self, name: str) -> str:\n        url = f\"https://prts.wiki/api.php?action=parse&page=泰拉大典:组织/其他&prop=wikitext&format=json\"\n        try:\n            response = requests.get(url)\n        except:\n            return None\n        data = response.json()\n        if \"error\" in data:\n            return None\n        wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        start = f\"==={name}===\\n\"\n        start_index = wikitext_content.find(start)\n        if start_index == -1:\n            start = f\"=== {name} ===\\n\"\n            start_index = wikitext_content.find(start)\n            if start_index == -1:\n                return None\n        end = \"==\"\n        end_index = wikitext_content.find(end, start_index + len(start) + 1)\n        if end_index == -1:\n            end_index = len(wikitext_content)\n        section_content = wikitext_content[start_index:end_index]\n        section_content = (\n            section_content.replace(\"{\", \"\")\n            .replace(\"}\", \"\")\n            .replace(\"|\", \"\")\n            .replace(\"[[\", \"\")\n            .replace(\"]]\", \"\")\n        )\n        return f\"该组织概要内容：\\n{section_content}\"\n\n    def get_place_info(self, name: str) -> str:\n        url = f\"https://prts.wiki/api.php?action=parse&page=泰拉大典:地理/{name}&prop=wikitext&format=json\"\n        try:\n            response = requests.get(url)\n        except:\n            return None\n        data = response.json()\n        if \"error\" in data:\n            return self.get_place_info_2(name)\n        wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        if \"#redirect\" in wikitext_content:\n            start = wikitext_content.find(\"[[\") + 2\n            end = wikitext_content.find(\"]]\")\n            redirect_target = wikitext_content[start:end]\n            url = f\"https://prts.wiki/api.php?action=parse&page={redirect_target}&prop=wikitext&format=json\"\n            try:\n                response = requests.get(url)\n            except:\n                return None\n            data = response.json()\n            wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        start = f\"{name}\"\n        start_index = wikitext_content.find(start)\n        if start_index == -1:\n            return None\n        end = \"注释与链接\"\n        end_index = wikitext_content.find(end, start_index + len(start) + 1)\n        if end_index == -1:\n            end_index = len(wikitext_content)\n        section_content = wikitext_content[start_index:end_index]\n        section_content = (\n            section_content.replace(\"{\", \"\")\n            .replace(\"}\", \"\")\n            .replace(\"|\", \"\")\n            .replace(\"[[\", \"\")\n            .replace(\"]]\", \"\")\n        )\n        return f\"该地区详细内容：\\n{section_content}\"\n\n    def get_place_info_2(self, name: str) -> str:\n        url = f\"https://prts.wiki/api.php?action=parse&page=泰拉大典:地理/其他&prop=wikitext&format=json\"\n        try:\n            response = requests.get(url)\n        except:\n            return None\n        data = response.json()\n        if \"error\" in data:\n            return None\n        wikitext_content = data[\"parse\"][\"wikitext\"][\"*\"]\n        start = f\"==={name}===\\n\"\n        start_index = wikitext_content.find(start)\n        if start_index == -1:\n            start = f\"=== {name} ===\\n\"\n            start_index = wikitext_content.find(start)\n            if start_index == -1:\n                return None\n        end = \"==\"\n        end_index = wikitext_content.find(end, start_index + len(start) + 1)\n        if end_index == -1:\n            end_index = len(wikitext_content)\n        section_content = wikitext_content[start_index:end_index]\n        section_content = (\n            section_content.replace(\"{\", \"\")\n            .replace(\"}\", \"\")\n            .replace(\"|\", \"\")\n            .replace(\"[[\", \"\")\n            .replace(\"]]\", \"\")\n        )\n        return f\"该地区概要内容：\\n{section_content}\"\n\n\nclass Tools:\n    def __init__(self):\n        pass\n\n    async def get_info(\n        self, name: str, __event_emitter__: Callable[[dict], Any] = None\n    ) -> str:\n        \"\"\"\n        从PRTS获取干员/人物/组织/国家/地区的档案或(及)概要内容\n        :param name: 干员/人物/组织/国家/地区名称\n        :return: 档案或(及)概要内容\n        \"\"\"\n        emitter = EventEmitter(__event_emitter__)\n        await emitter.emit(f\"正在搜索PRTS数据库...\")\n        await emitter.emit(\n            status=\"in_progress\", description=f\"正在搜索PRTS数据库...\", done=True\n        )\n        helper = HelperFunction()\n        profile_enter = helper.get_profile_enter(name)\n        profile_noenter = helper.get_profile_noenter(name)\n        organization_info = helper.get_organization_info(name)\n        place_info = helper.get_place_info(name)\n        content = []\n        await emitter.emit(\n            status=\"complete\", description=f\"完成PRTS数据库搜索\", done=True\n        )\n        if profile_enter:\n            content.append(profile_enter)\n        if profile_noenter:\n            content.append(profile_noenter)\n        if organization_info:\n            content.append(organization_info)\n        if place_info:\n            content.append(place_info)\n        if content:\n            return (\n                \"\\n\".join(content)\n                + \"\\n[作为语言模型你应该记住的]返回给用户时，保持人物设定，先总结内容，再根据自己的总结返回给用户\\n[作为扮演的角色你应该记住的]你是从PRTS中获得的信息，返回给博士时遵守博士的指令\"\n            )\n        else:\n            return \"未找到该干员/人物档案(概要)\"\n","specs":[{"name":"get_info","description":"从PRTS获取干员/人物/组织/国家/地区的档案或(及)概要内容","parameters":{"properties":{"name":{"description":"干员/人物/组织/国家/地区名称","type":"string"}},"required":["name"],"type":"object"}}],"meta":{"description":"为LLM提供PRTS.wiki接入能力","manifest":{"title":"PRTS","author":"Tony32","author_url":"","git_url":"","description":"This tools allow model access prts.wiki, which is a wiki for Arknights.","required_open_webui_version":"0.1.5","requirements":"requests","version":"0.1.5","licence":"MIT"}},"access_control":null,"updated_at":1738677748,"created_at":1738677748}]